import string
def mutate(word):
    """Input a word. Output all words generated by a single mutation on a 
      given word. A mutation is defined as inserting a character, deleting 
      a character, replacing a character, or swapping 2 consecutive 
      characters in a string.Word should contain only small letters. """
    alph = list(string.ascii_lowercase)
    mute_list = []
    a = list(word)
    for i in range(len(a)):
        l = a[0 : i] + a[(i+1) : ]
        s1 = ''.join(l)
        mute_list.append(s1)   #Delete one letter
    for p in range(len(a)):
        for q in alph:
            new = a[ : p] + list(q) + a[p : ]
            s_new = ''.join(new)
            mute_list.append(s_new)  #Inserting a letter
    for j in range(len(a)):
        for lett in alph:
            ls = a[0 : j] + list(lett) + a[j+1 : ] 
            s2 = ''.join(ls)
            mute_list.append(s2)    #Replace one letter
    lst = ''
    for k in range(len(word)):
        if k == len(word) -1:
            lst = word[k] + word[1 : k] + word[0]
        elif k == 0:
            lst = word[1] + word[0] + word[2 : ]
        else: 
            lst = word[: k] + word[k+1] + word[k] + word[k+2 : ]
        mute_list.append(lst)   #Swaping letters in the word 

    return set(mute_list)


def nearly_equal(s1,s2):
    """Returns True if s1 nearly equals (s1 can be generated by a single mutation if s1 and s2 
       are nearly equal). Input two strings s1 and s2."""
    out = mutate(s1)
    if s2 in out:
        print "s1 and s2 are nearly equal. \n"
    else:
        print "s1 and s2 are not nearly equal. \n"

nearly_equal('python', 'perl')
nearly_equal('perl', 'pearl')
nearly_equal('python', 'jython')
nearly_equal('man', 'woman')
    
